{
  "contractName": "CrossChainEnabledAMB",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "bridge",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bridge\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}],\"devdoc\":{\"details\":\"https://docs.tokenbridge.net/amb-bridge/about-amb-bridge[AMB] specialization or the {CrossChainEnabled} abstraction. As of february 2020, AMB bridges are available between the following chains: - https://docs.tokenbridge.net/eth-xdai-amb-bridge/about-the-eth-xdai-amb[ETH \\u21cc xDai] - https://docs.tokenbridge.net/eth-qdai-bridge/about-the-eth-qdai-amb[ETH \\u21cc qDai] - https://docs.tokenbridge.net/eth-etc-amb-bridge/about-the-eth-etc-amb[ETH \\u21cc ETC] - https://docs.tokenbridge.net/eth-bsc-amb/about-the-eth-bsc-amb[ETH \\u21cc BSC] - https://docs.tokenbridge.net/eth-poa-amb-bridge/about-the-eth-poa-amb[ETH \\u21cc POA] - https://docs.tokenbridge.net/bsc-xdai-amb/about-the-bsc-xdai-amb[BSC \\u21cc xDai] - https://docs.tokenbridge.net/poa-xdai-amb/about-the-poa-xdai-amb[POA \\u21cc xDai] - https://docs.tokenbridge.net/rinkeby-xdai-amb-bridge/about-the-rinkeby-xdai-amb[Rinkeby \\u21cc xDai] - https://docs.tokenbridge.net/kovan-sokol-amb-bridge/about-the-kovan-sokol-amb[Kovan \\u21cc Sokol] _Available since v4.6._\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"}},\"stateVariables\":{\"_bridge\":{\"custom:oz-upgrades-unsafe-allow\":\"state-variable-immutable\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"project:/contracts/crosschain/amb/CrossChainEnabledAMB.sol\":\"CrossChainEnabledAMB\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"project:/contracts/crosschain/CrossChainEnabled.sol\":{\"keccak256\":\"0x1ec2f661e2b0bd06b245f7e847111d5b40d32380794bd2d791e89b0bdc3ef082\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9466ccdfd19225a51b9b785e60f22b04220684b8c9f24e11b62b740ad77f761f\",\"dweb:/ipfs/QmUAXfC4rzW9cqVdNkXA5c4HgqxNRwzo2MbUV4wDT52tED\"]},\"project:/contracts/crosschain/amb/CrossChainEnabledAMB.sol\":{\"keccak256\":\"0x94f83db4af64eaaf4dc014ed2c4262759837c7a8116e38b7edb2a3783a87e3c3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://793a10201c54ed8d06f1203a9d9335aee76088a3ddfdad39822f0492dddc2c36\",\"dweb:/ipfs/QmToTXmuR1SRD8ZuAepkoRjUD7st9gcbqhu9JgTRpMN9qV\"]},\"project:/contracts/crosschain/amb/LibAMB.sol\":{\"keccak256\":\"0x878c0309d1d840c4d491f30940697734929ce5105e25459ea48f78a19732589b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://57710ddb7da21949796c6d3acda3d82733e0871216debb8eb76f90d3446f1d5e\",\"dweb:/ipfs/QmVV3sT6KAQiV8aVfASgpoegywqwpPwy3MA5EcpTXZ8prV\"]},\"project:/contracts/crosschain/errors.sol\":{\"keccak256\":\"0xa1e9b651a2427925598b49ef35da5930abc07859cfac5b9dfb1912f063a024b3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c514518c36a3fb1c5f1a99d88857e93160c72ea1fd728c443406ad1acb43ae9a\",\"dweb:/ipfs/Qmc3oXjBNhdeM5cfWpsvewXZAhH34Scgna2W3MvLaiiapQ\"]},\"project:/contracts/vendor/amb/IAMB.sol\":{\"keccak256\":\"0xd317c3a8ce13b385b8e3523ea369c36453729472dd386ed461cd05d930994e09\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ccc8a7b3ab6530e52ab366cfe0b2b9dfc06115157ccbfcd3bfbb84eb0ecfa28e\",\"dweb:/ipfs/QmZBidPVQAsFQTYxbRroGiLJLaFz1RFtdetD8PnB5XwREg\"]}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b5060405161015738038061015783398181016040528101906100329190610084565b8073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b81525050506100ff565b60008151905061007e816100e8565b92915050565b60006020828403121561009a576100996100e3565b5b60006100a88482850161006f565b91505092915050565b60006100bc826100c3565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600080fd5b6100f1816100b1565b81146100fc57600080fd5b50565b60805160601c603f61011860003960005050603f6000f3fe6080604052600080fdfea264697066735822122058dc7a19b0760a58f312b0305a730f4bc3dca73541acb3ba73efa61c94316c4d64736f6c63430008070033",
  "deployedBytecode": "0x6080604052600080fdfea264697066735822122058dc7a19b0760a58f312b0305a730f4bc3dca73541acb3ba73efa61c94316c4d64736f6c63430008070033",
  "immutableReferences": {},
  "generatedSources": [
    {
      "ast": {
        "nodeType": "YulBlock",
        "src": "0:1199:65",
        "statements": [
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "70:80:65",
              "statements": [
                {
                  "nodeType": "YulAssignment",
                  "src": "80:22:65",
                  "value": {
                    "arguments": [
                      {
                        "name": "offset",
                        "nodeType": "YulIdentifier",
                        "src": "95:6:65"
                      }
                    ],
                    "functionName": {
                      "name": "mload",
                      "nodeType": "YulIdentifier",
                      "src": "89:5:65"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "89:13:65"
                  },
                  "variableNames": [
                    {
                      "name": "value",
                      "nodeType": "YulIdentifier",
                      "src": "80:5:65"
                    }
                  ]
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "name": "value",
                        "nodeType": "YulIdentifier",
                        "src": "138:5:65"
                      }
                    ],
                    "functionName": {
                      "name": "validator_revert_t_address",
                      "nodeType": "YulIdentifier",
                      "src": "111:26:65"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "111:33:65"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "111:33:65"
                }
              ]
            },
            "name": "abi_decode_t_address_fromMemory",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "offset",
                "nodeType": "YulTypedName",
                "src": "48:6:65",
                "type": ""
              },
              {
                "name": "end",
                "nodeType": "YulTypedName",
                "src": "56:3:65",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "value",
                "nodeType": "YulTypedName",
                "src": "64:5:65",
                "type": ""
              }
            ],
            "src": "7:143:65"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "233:274:65",
              "statements": [
                {
                  "body": {
                    "nodeType": "YulBlock",
                    "src": "279:83:65",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [],
                          "functionName": {
                            "name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                            "nodeType": "YulIdentifier",
                            "src": "281:77:65"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "281:79:65"
                        },
                        "nodeType": "YulExpressionStatement",
                        "src": "281:79:65"
                      }
                    ]
                  },
                  "condition": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "dataEnd",
                            "nodeType": "YulIdentifier",
                            "src": "254:7:65"
                          },
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "263:9:65"
                          }
                        ],
                        "functionName": {
                          "name": "sub",
                          "nodeType": "YulIdentifier",
                          "src": "250:3:65"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "250:23:65"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "275:2:65",
                        "type": "",
                        "value": "32"
                      }
                    ],
                    "functionName": {
                      "name": "slt",
                      "nodeType": "YulIdentifier",
                      "src": "246:3:65"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "246:32:65"
                  },
                  "nodeType": "YulIf",
                  "src": "243:119:65"
                },
                {
                  "nodeType": "YulBlock",
                  "src": "372:128:65",
                  "statements": [
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "387:15:65",
                      "value": {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "401:1:65",
                        "type": "",
                        "value": "0"
                      },
                      "variables": [
                        {
                          "name": "offset",
                          "nodeType": "YulTypedName",
                          "src": "391:6:65",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "416:74:65",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "462:9:65"
                              },
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "473:6:65"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "458:3:65"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "458:22:65"
                          },
                          {
                            "name": "dataEnd",
                            "nodeType": "YulIdentifier",
                            "src": "482:7:65"
                          }
                        ],
                        "functionName": {
                          "name": "abi_decode_t_address_fromMemory",
                          "nodeType": "YulIdentifier",
                          "src": "426:31:65"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "426:64:65"
                      },
                      "variableNames": [
                        {
                          "name": "value0",
                          "nodeType": "YulIdentifier",
                          "src": "416:6:65"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            "name": "abi_decode_tuple_t_address_fromMemory",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "headStart",
                "nodeType": "YulTypedName",
                "src": "203:9:65",
                "type": ""
              },
              {
                "name": "dataEnd",
                "nodeType": "YulTypedName",
                "src": "214:7:65",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "value0",
                "nodeType": "YulTypedName",
                "src": "226:6:65",
                "type": ""
              }
            ],
            "src": "156:351:65"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "553:35:65",
              "statements": [
                {
                  "nodeType": "YulAssignment",
                  "src": "563:19:65",
                  "value": {
                    "arguments": [
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "579:2:65",
                        "type": "",
                        "value": "64"
                      }
                    ],
                    "functionName": {
                      "name": "mload",
                      "nodeType": "YulIdentifier",
                      "src": "573:5:65"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "573:9:65"
                  },
                  "variableNames": [
                    {
                      "name": "memPtr",
                      "nodeType": "YulIdentifier",
                      "src": "563:6:65"
                    }
                  ]
                }
              ]
            },
            "name": "allocate_unbounded",
            "nodeType": "YulFunctionDefinition",
            "returnVariables": [
              {
                "name": "memPtr",
                "nodeType": "YulTypedName",
                "src": "546:6:65",
                "type": ""
              }
            ],
            "src": "513:75:65"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "639:51:65",
              "statements": [
                {
                  "nodeType": "YulAssignment",
                  "src": "649:35:65",
                  "value": {
                    "arguments": [
                      {
                        "name": "value",
                        "nodeType": "YulIdentifier",
                        "src": "678:5:65"
                      }
                    ],
                    "functionName": {
                      "name": "cleanup_t_uint160",
                      "nodeType": "YulIdentifier",
                      "src": "660:17:65"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "660:24:65"
                  },
                  "variableNames": [
                    {
                      "name": "cleaned",
                      "nodeType": "YulIdentifier",
                      "src": "649:7:65"
                    }
                  ]
                }
              ]
            },
            "name": "cleanup_t_address",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "value",
                "nodeType": "YulTypedName",
                "src": "621:5:65",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "cleaned",
                "nodeType": "YulTypedName",
                "src": "631:7:65",
                "type": ""
              }
            ],
            "src": "594:96:65"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "741:81:65",
              "statements": [
                {
                  "nodeType": "YulAssignment",
                  "src": "751:65:65",
                  "value": {
                    "arguments": [
                      {
                        "name": "value",
                        "nodeType": "YulIdentifier",
                        "src": "766:5:65"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "773:42:65",
                        "type": "",
                        "value": "0xffffffffffffffffffffffffffffffffffffffff"
                      }
                    ],
                    "functionName": {
                      "name": "and",
                      "nodeType": "YulIdentifier",
                      "src": "762:3:65"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "762:54:65"
                  },
                  "variableNames": [
                    {
                      "name": "cleaned",
                      "nodeType": "YulIdentifier",
                      "src": "751:7:65"
                    }
                  ]
                }
              ]
            },
            "name": "cleanup_t_uint160",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "value",
                "nodeType": "YulTypedName",
                "src": "723:5:65",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "cleaned",
                "nodeType": "YulTypedName",
                "src": "733:7:65",
                "type": ""
              }
            ],
            "src": "696:126:65"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "917:28:65",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "934:1:65",
                        "type": "",
                        "value": "0"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "937:1:65",
                        "type": "",
                        "value": "0"
                      }
                    ],
                    "functionName": {
                      "name": "revert",
                      "nodeType": "YulIdentifier",
                      "src": "927:6:65"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "927:12:65"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "927:12:65"
                }
              ]
            },
            "name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
            "nodeType": "YulFunctionDefinition",
            "src": "828:117:65"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "1040:28:65",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "1057:1:65",
                        "type": "",
                        "value": "0"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "1060:1:65",
                        "type": "",
                        "value": "0"
                      }
                    ],
                    "functionName": {
                      "name": "revert",
                      "nodeType": "YulIdentifier",
                      "src": "1050:6:65"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "1050:12:65"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "1050:12:65"
                }
              ]
            },
            "name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
            "nodeType": "YulFunctionDefinition",
            "src": "951:117:65"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "1117:79:65",
              "statements": [
                {
                  "body": {
                    "nodeType": "YulBlock",
                    "src": "1174:16:65",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "1183:1:65",
                              "type": "",
                              "value": "0"
                            },
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "1186:1:65",
                              "type": "",
                              "value": "0"
                            }
                          ],
                          "functionName": {
                            "name": "revert",
                            "nodeType": "YulIdentifier",
                            "src": "1176:6:65"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "1176:12:65"
                        },
                        "nodeType": "YulExpressionStatement",
                        "src": "1176:12:65"
                      }
                    ]
                  },
                  "condition": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "1140:5:65"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "1165:5:65"
                              }
                            ],
                            "functionName": {
                              "name": "cleanup_t_address",
                              "nodeType": "YulIdentifier",
                              "src": "1147:17:65"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1147:24:65"
                          }
                        ],
                        "functionName": {
                          "name": "eq",
                          "nodeType": "YulIdentifier",
                          "src": "1137:2:65"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1137:35:65"
                      }
                    ],
                    "functionName": {
                      "name": "iszero",
                      "nodeType": "YulIdentifier",
                      "src": "1130:6:65"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "1130:43:65"
                  },
                  "nodeType": "YulIf",
                  "src": "1127:63:65"
                }
              ]
            },
            "name": "validator_revert_t_address",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "value",
                "nodeType": "YulTypedName",
                "src": "1110:5:65",
                "type": ""
              }
            ],
            "src": "1074:122:65"
          }
        ]
      },
      "contents": "{\n\n    function abi_decode_t_address_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_tuple_t_address_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n}\n",
      "id": 65,
      "language": "Yul",
      "name": "#utility.yul"
    }
  ],
  "deployedGeneratedSources": [],
  "sourceMap": "1265:699:6:-:0;;;1481:61;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1529:6;1519:16;;;;;;;;;;;;1481:61;1265:699;;7:143:65;64:5;95:6;89:13;80:22;;111:33;138:5;111:33;:::i;:::-;7:143;;;;:::o;156:351::-;226:6;275:2;263:9;254:7;250:23;246:32;243:119;;;281:79;;:::i;:::-;243:119;401:1;426:64;482:7;473:6;462:9;458:22;426:64;:::i;:::-;416:74;;372:128;156:351;;;;:::o;594:96::-;631:7;660:24;678:5;660:24;:::i;:::-;649:35;;594:96;;;:::o;696:126::-;733:7;773:42;766:5;762:54;751:65;;696:126;;;:::o;951:117::-;1060:1;1057;1050:12;1074:122;1147:24;1165:5;1147:24;:::i;:::-;1140:5;1137:35;1127:63;;1186:1;1183;1176:12;1127:63;1074:122;:::o;1265:699:6:-;;;;;;;;;;;;;",
  "deployedSourceMap": "1265:699:6:-:0;;;;;",
  "source": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (crosschain/amb/CrossChainEnabledAMB.sol)\n\npragma solidity ^0.8.4;\n\nimport \"../CrossChainEnabled.sol\";\nimport \"./LibAMB.sol\";\n\n/**\n * @dev https://docs.tokenbridge.net/amb-bridge/about-amb-bridge[AMB]\n * specialization or the {CrossChainEnabled} abstraction.\n *\n * As of february 2020, AMB bridges are available between the following chains:\n *\n * - https://docs.tokenbridge.net/eth-xdai-amb-bridge/about-the-eth-xdai-amb[ETH ⇌ xDai]\n * - https://docs.tokenbridge.net/eth-qdai-bridge/about-the-eth-qdai-amb[ETH ⇌ qDai]\n * - https://docs.tokenbridge.net/eth-etc-amb-bridge/about-the-eth-etc-amb[ETH ⇌ ETC]\n * - https://docs.tokenbridge.net/eth-bsc-amb/about-the-eth-bsc-amb[ETH ⇌ BSC]\n * - https://docs.tokenbridge.net/eth-poa-amb-bridge/about-the-eth-poa-amb[ETH ⇌ POA]\n * - https://docs.tokenbridge.net/bsc-xdai-amb/about-the-bsc-xdai-amb[BSC ⇌ xDai]\n * - https://docs.tokenbridge.net/poa-xdai-amb/about-the-poa-xdai-amb[POA ⇌ xDai]\n * - https://docs.tokenbridge.net/rinkeby-xdai-amb-bridge/about-the-rinkeby-xdai-amb[Rinkeby ⇌ xDai]\n * - https://docs.tokenbridge.net/kovan-sokol-amb-bridge/about-the-kovan-sokol-amb[Kovan ⇌ Sokol]\n *\n * _Available since v4.6._\n */\ncontract CrossChainEnabledAMB is CrossChainEnabled {\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\n    address private immutable _bridge;\n\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor(address bridge) {\n        _bridge = bridge;\n    }\n\n    /**\n     * @dev see {CrossChainEnabled-_isCrossChain}\n     */\n    function _isCrossChain() internal view virtual override returns (bool) {\n        return LibAMB.isCrossChain(_bridge);\n    }\n\n    /**\n     * @dev see {CrossChainEnabled-_crossChainSender}\n     */\n    function _crossChainSender() internal view virtual override onlyCrossChain returns (address) {\n        return LibAMB.crossChainSender(_bridge);\n    }\n}\n",
  "sourcePath": "/Users/vivekreddy/Documents/Spring2022/Blockchain/Code/BI_Final/BI-contract/contracts/crosschain/amb/CrossChainEnabledAMB.sol",
  "ast": {
    "absolutePath": "project:/contracts/crosschain/amb/CrossChainEnabledAMB.sol",
    "exportedSymbols": {
      "AMB_Bridge": [
        3780
      ],
      "CrossChainEnabled": [
        1003
      ],
      "CrossChainEnabledAMB": [
        1053
      ],
      "InvalidCrossChainSender": [
        1317
      ],
      "LibAMB": [
        1097
      ],
      "NotCrossChainCall": [
        1311
      ]
    },
    "id": 1054,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1005,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".4"
        ],
        "nodeType": "PragmaDirective",
        "src": "123:23:6"
      },
      {
        "absolutePath": "project:/contracts/crosschain/CrossChainEnabled.sol",
        "file": "../CrossChainEnabled.sol",
        "id": 1006,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 1054,
        "sourceUnit": 1004,
        "src": "148:34:6",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "project:/contracts/crosschain/amb/LibAMB.sol",
        "file": "./LibAMB.sol",
        "id": 1007,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 1054,
        "sourceUnit": 1098,
        "src": "183:22:6",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 1009,
              "name": "CrossChainEnabled",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 1003,
              "src": "1298:17:6"
            },
            "id": 1010,
            "nodeType": "InheritanceSpecifier",
            "src": "1298:17:6"
          }
        ],
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": {
          "id": 1008,
          "nodeType": "StructuredDocumentation",
          "src": "207:1057:6",
          "text": " @dev https://docs.tokenbridge.net/amb-bridge/about-amb-bridge[AMB]\n specialization or the {CrossChainEnabled} abstraction.\n As of february 2020, AMB bridges are available between the following chains:\n - https://docs.tokenbridge.net/eth-xdai-amb-bridge/about-the-eth-xdai-amb[ETH ⇌ xDai]\n - https://docs.tokenbridge.net/eth-qdai-bridge/about-the-eth-qdai-amb[ETH ⇌ qDai]\n - https://docs.tokenbridge.net/eth-etc-amb-bridge/about-the-eth-etc-amb[ETH ⇌ ETC]\n - https://docs.tokenbridge.net/eth-bsc-amb/about-the-eth-bsc-amb[ETH ⇌ BSC]\n - https://docs.tokenbridge.net/eth-poa-amb-bridge/about-the-eth-poa-amb[ETH ⇌ POA]\n - https://docs.tokenbridge.net/bsc-xdai-amb/about-the-bsc-xdai-amb[BSC ⇌ xDai]\n - https://docs.tokenbridge.net/poa-xdai-amb/about-the-poa-xdai-amb[POA ⇌ xDai]\n - https://docs.tokenbridge.net/rinkeby-xdai-amb-bridge/about-the-rinkeby-xdai-amb[Rinkeby ⇌ xDai]\n - https://docs.tokenbridge.net/kovan-sokol-amb-bridge/about-the-kovan-sokol-amb[Kovan ⇌ Sokol]\n _Available since v4.6._"
        },
        "fullyImplemented": true,
        "id": 1053,
        "linearizedBaseContracts": [
          1053,
          1003
        ],
        "name": "CrossChainEnabledAMB",
        "nameLocation": "1274:20:6",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "documentation": {
              "id": 1011,
              "nodeType": "StructuredDocumentation",
              "src": "1322:61:6",
              "text": "@custom:oz-upgrades-unsafe-allow state-variable-immutable"
            },
            "id": 1013,
            "mutability": "immutable",
            "name": "_bridge",
            "nameLocation": "1414:7:6",
            "nodeType": "VariableDeclaration",
            "scope": 1053,
            "src": "1388:33:6",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 1012,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "1388:7:6",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "private"
          },
          {
            "body": {
              "id": 1023,
              "nodeType": "Block",
              "src": "1509:33:6",
              "statements": [
                {
                  "expression": {
                    "id": 1021,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 1019,
                      "name": "_bridge",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1013,
                      "src": "1519:7:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 1020,
                      "name": "bridge",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1016,
                      "src": "1529:6:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "1519:16:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 1022,
                  "nodeType": "ExpressionStatement",
                  "src": "1519:16:6"
                }
              ]
            },
            "documentation": {
              "id": 1014,
              "nodeType": "StructuredDocumentation",
              "src": "1428:48:6",
              "text": "@custom:oz-upgrades-unsafe-allow constructor"
            },
            "id": 1024,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1017,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1016,
                  "mutability": "mutable",
                  "name": "bridge",
                  "nameLocation": "1501:6:6",
                  "nodeType": "VariableDeclaration",
                  "scope": 1024,
                  "src": "1493:14:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1015,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1493:7:6",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1492:16:6"
            },
            "returnParameters": {
              "id": 1018,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1509:0:6"
            },
            "scope": 1053,
            "src": "1481:61:6",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              996
            ],
            "body": {
              "id": 1036,
              "nodeType": "Block",
              "src": "1685:52:6",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 1033,
                        "name": "_bridge",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1013,
                        "src": "1722:7:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "expression": {
                        "id": 1031,
                        "name": "LibAMB",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1097,
                        "src": "1702:6:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_LibAMB_$1097_$",
                          "typeString": "type(library LibAMB)"
                        }
                      },
                      "id": 1032,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "isCrossChain",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 1073,
                      "src": "1702:19:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
                        "typeString": "function (address) view returns (bool)"
                      }
                    },
                    "id": 1034,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1702:28:6",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 1030,
                  "id": 1035,
                  "nodeType": "Return",
                  "src": "1695:35:6"
                }
              ]
            },
            "documentation": {
              "id": 1025,
              "nodeType": "StructuredDocumentation",
              "src": "1548:61:6",
              "text": " @dev see {CrossChainEnabled-_isCrossChain}"
            },
            "id": 1037,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_isCrossChain",
            "nameLocation": "1623:13:6",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 1027,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "1661:8:6"
            },
            "parameters": {
              "id": 1026,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1636:2:6"
            },
            "returnParameters": {
              "id": 1030,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1029,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 1037,
                  "src": "1679:4:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 1028,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "1679:4:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1678:6:6"
            },
            "scope": 1053,
            "src": "1614:123:6",
            "stateMutability": "view",
            "virtual": true,
            "visibility": "internal"
          },
          {
            "baseFunctions": [
              1002
            ],
            "body": {
              "id": 1051,
              "nodeType": "Block",
              "src": "1906:56:6",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 1048,
                        "name": "_bridge",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1013,
                        "src": "1947:7:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "expression": {
                        "id": 1046,
                        "name": "LibAMB",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1097,
                        "src": "1923:6:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_LibAMB_$1097_$",
                          "typeString": "type(library LibAMB)"
                        }
                      },
                      "id": 1047,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "crossChainSender",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 1096,
                      "src": "1923:23:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_address_$",
                        "typeString": "function (address) view returns (address)"
                      }
                    },
                    "id": 1049,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1923:32:6",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "functionReturnParameters": 1045,
                  "id": 1050,
                  "nodeType": "Return",
                  "src": "1916:39:6"
                }
              ]
            },
            "documentation": {
              "id": 1038,
              "nodeType": "StructuredDocumentation",
              "src": "1743:65:6",
              "text": " @dev see {CrossChainEnabled-_crossChainSender}"
            },
            "id": 1052,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 1042,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 1041,
                  "name": "onlyCrossChain",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 969,
                  "src": "1873:14:6"
                },
                "nodeType": "ModifierInvocation",
                "src": "1873:14:6"
              }
            ],
            "name": "_crossChainSender",
            "nameLocation": "1822:17:6",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 1040,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "1864:8:6"
            },
            "parameters": {
              "id": 1039,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1839:2:6"
            },
            "returnParameters": {
              "id": 1045,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1044,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 1052,
                  "src": "1897:7:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1043,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1897:7:6",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1896:9:6"
            },
            "scope": 1053,
            "src": "1813:149:6",
            "stateMutability": "view",
            "virtual": true,
            "visibility": "internal"
          }
        ],
        "scope": 1054,
        "src": "1265:699:6",
        "usedErrors": []
      }
    ],
    "src": "123:1842:6"
  },
  "compiler": {
    "name": "solc",
    "version": "0.8.7+commit.e28d00a7.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.4.7",
  "updatedAt": "2022-05-07T21:37:20.041Z",
  "devdoc": {
    "details": "https://docs.tokenbridge.net/amb-bridge/about-amb-bridge[AMB] specialization or the {CrossChainEnabled} abstraction. As of february 2020, AMB bridges are available between the following chains: - https://docs.tokenbridge.net/eth-xdai-amb-bridge/about-the-eth-xdai-amb[ETH ⇌ xDai] - https://docs.tokenbridge.net/eth-qdai-bridge/about-the-eth-qdai-amb[ETH ⇌ qDai] - https://docs.tokenbridge.net/eth-etc-amb-bridge/about-the-eth-etc-amb[ETH ⇌ ETC] - https://docs.tokenbridge.net/eth-bsc-amb/about-the-eth-bsc-amb[ETH ⇌ BSC] - https://docs.tokenbridge.net/eth-poa-amb-bridge/about-the-eth-poa-amb[ETH ⇌ POA] - https://docs.tokenbridge.net/bsc-xdai-amb/about-the-bsc-xdai-amb[BSC ⇌ xDai] - https://docs.tokenbridge.net/poa-xdai-amb/about-the-poa-xdai-amb[POA ⇌ xDai] - https://docs.tokenbridge.net/rinkeby-xdai-amb-bridge/about-the-rinkeby-xdai-amb[Rinkeby ⇌ xDai] - https://docs.tokenbridge.net/kovan-sokol-amb-bridge/about-the-kovan-sokol-amb[Kovan ⇌ Sokol] _Available since v4.6._",
    "kind": "dev",
    "methods": {
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      }
    },
    "stateVariables": {
      "_bridge": {
        "custom:oz-upgrades-unsafe-allow": "state-variable-immutable"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  }
}